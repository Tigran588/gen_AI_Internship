# -*- coding: utf-8 -*-
"""Untitled33.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ezRBWFtrdS8r9y7L8jUOo_LG93O1OItE
"""

class Int:


  def __init__(self,min_value,max_value ):
    self.min_value = min_value
    self.max_value = max_value

  def check_type(self,val):
    if not isinstance(val,int):
      raise ValueError('value must be an integer')
    if not (self.min_value < val < self.max_value):
      raise ValueError(f'val must be on {self.min_value} to {self.max_value} ')

  def __set_name__(self,owner,name):
    self.name =  name

  def __set__(self,instance,value):
    if self.check_type(value):
      instance.__dict__[self.name] = value

  def __get__(self,instance,owner):
    return instance.__dict__[self.name]

class Point2D:


    def __init__(self,minn,maxx):
        self.x = Int(min_value= minn, max_value = maxx)
        self.y = Int(min_value= minn ,max_value = maxx)

    def __set__(self, instance, value):
        if not isinstance(value, tuple) or len(value) != 2:
          raise ValueError

        x, y = value

        self.x.check_type(x)
        self.y.check_type(y)

        instance.__dict__[self.x] = x
        instance.__dict__[self.y] = y

    def __get__(self, instance, owner):
        return instance.__dict__[self.x.name], instance.__dict__[self.y.name]

class Point2DSequence:
    def __init__(self, min_length=None, max_length=None):
        self.min_length = min_length
        self.max_length = max_length

    def check_cond(self, value):
        if not isinstance(value, (list, tuple)):
            raise ValueError("argumnet must be tuple or list")

        if len(value) < self.min_length:
            raise ValueError('must be big value')

        if len(value) > self.max_length:
            raise ValueError(" must be small value ")

        for var in value:
            if not isinstance(var, Point2D):
                raise ValueError

    def __set__(self, instance, value):
        self.check_cond(value)
        instance.__dict__['var'] = list(value)

    def __get__(self, instance, owner):
        return instance.__dict__['var']

class Polygon:
    var = Point2DSequence(min_length=3, max_length=6)

    def __init__(self, *var):
        self.var = var

    def append(self, var):
        new_var = self.var + [var]
        self.var = new_var
